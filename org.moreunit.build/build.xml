<?xml version="1.0" encoding="UTF-8"?>
<project default="build_nightly" name="MoreUnit">

	<!-- Specify the version of the features to build -->
	<property name="main_number" value="2"/>
	<property name="major_number" value="4"/>
	<property name="minor_number" value="6"/>

	<!-- PROPERTIES INCLUSION -->

	<!--
		Create this file with the following properties:
		
		workspace=...
		temp_path=...     # temporary build-path (be aware to adapt the buildDirectory-property in build.properties too)
		eclipse_path=...
		username=...      # SF-Username
		keyfile=...       # private key for scp
		
		# you will find the following values in the plugins folder of your Eclipse installation:
		equinox_launcher_jar_name = org.eclipse.equinox.launcher_<version>.jar
		pde_build_folder_name = org.eclipse.pde.build_<version>
		
		moreunit_feature_plugins=org.moreunit.plugin/**
	  	moreunit_mock_feature_plugins=org.moreunit.mock/**,org.moreunit.dependencies.guice/**,org.moreunit.dependencies.jaxb/**
	  -->
	<property file="moreunit.properties"/>

	<!-- /PROPERTIES INCLUSION -->

	<!--
	  Generate properties for versions
	  http://help.eclipse.org/galileo/index.jsp?topic=/org.eclipse.pde.doc.user/tasks/pde_version_qualifiers.htm
	  
	  This will generate properties-files in /tmp/moreunit.build:
	  - finalFeaturesVersions.properties
	  
	  Sample content:
	  #Sat Mar 05 18:46:18 CET 2011
	  org.moreunit_2.3.0=2.3.0.201103051846
	  org.moreunit=2.3.0.201103051846
	  org.moreunit.source_2.3.0=2.3.0.201103051846
	  org.moreunit.source=2.3.0.201103051846
	  -->
	<property name="generateVersionsLists" value="true" />

	<property name="version_number" value="${main_number}.${major_number}.${minor_number}"/>
	<property name="version_number_file" value="${main_number}_${major_number}_${minor_number}"/>

	<property name="update-site-project" value="${workspace}/org.moreunit.updatesite"/>

	<property name="repository_folder" value="repository"/>

	<property name="svn_host" value="https://moreunit.svn.sourceforge.net/svnroot/moreunit"/>

	<!--
		This task should be used to build a release version.
		It should export a tagged version from SVN (later GIT) and build this tagged version.
		(Export is not tested yet)
	  -->
	<target
		name="build_release"
		depends="prepare_release_properties, get_tagged_sources, prepare_folder_for_release, build_feature, unzip_features, metadata, category"
		description="Builds a release version from SVN and updates the update site project">
		<echo>Build new release version ${version_number}</echo>
	</target>

	<!--
		This task should be used in the early phase of a new release cycle.
		The version number should not be changed.
		The result of this build uses timestamp-qualifiers to update to new versions.
	  -->
	<target
		name="build_nightly"
		depends="set_qualifier_to_context, refresh, prepare_latestandgreatest_properties, prepare_folder_for_local_build, build_feature, unzip_features, metadata, update_category, category, set_qualifier_to_none, refresh"
		description="Builds a nightly build and puts it on the latestandgreatest update site">
	</target>

	<!--
		This task should be used in the last phase of a release cycle (after feature freeze).
		Every new prerelease version should have a new minor version number (the first prerelease
		version should have a new major version number).
		The result of this build does not use the qualifier.
		Committing and tagging in SVN (later GIT) is commented out at the moment.
	  -->
	<target
		name="build_pre_release"
		depends="prepare_release_properties, update_version_number, refresh, prepare_folder_for_local_build, build_feature, unzip_features, metadata, update_category, refresh, category, commit_version_number, tag_version"
		description="Builds a new pre-release version with a new version number">
	</target>

	<target name="unzip_features">
		<unzip src="${temp_path}/moreunit.build/moreunitbuild/org.moreunit-build.zip" dest="${temp_path}/org.moreunit_V_${version_number_file}/"/>
		<unzip src="${temp_path}/moreunit.build/moreunitbuild/org.moreunit.mock-build.zip" dest="${temp_path}/org.moreunit_V_${version_number_file}/"/>
	</target>

	<target name="refresh">
		<echo>Refreshing feature.xml, MANIFEST.MF, category.xml, build.properties</echo>
		<eclipse.refreshLocal resource="org.moreunit.feature/feature.xml" depth="infinite"/>
		<eclipse.refreshLocal resource="org.moreunit.plugin/META-INF/MANIFEST.MF" depth="infinite"/>
		<eclipse.refreshLocal resource="org.moreunit.build/category.xml" depth="infinite"/>
		<eclipse.refreshLocal resource="org.moreunit.build/category_latestandgreatest.xml" depth="infinite"/>
		<eclipse.refreshLocal resource="org.moreunit.feature/build.properties" depth="infinite"/>
		<eclipse.refreshLocal resource="org.moreunit.plugin/build.properties" depth="infinite"/>
		<eclipse.refreshLocal resource="org.moreunit.mock.feature/feature.xml" depth="infinite"/>
		<eclipse.refreshLocal resource="org.moreunit.mock.feature/build.properties" depth="infinite"/>
		<eclipse.refreshLocal resource="org.moreunit.mock.plugin/META-INF/MANIFEST.MF" depth="infinite"/>
		<eclipse.refreshLocal resource="org.moreunit.mock.plugin/build.properties" depth="infinite"/>
		<eclipse.refreshLocal resource="org.moreunit.dependencies.guice/build.properties" depth="infinite"/>
		<eclipse.refreshLocal resource="org.moreunit.dependencies.jaxb/build.properties" depth="infinite"/>
	</target>

	<!--
		This target creates the artifacts.jar and contents.jar for the current export
	  -->
	<target name="metadata">
		<exec executable="${eclipse_path}/eclipse">
			<arg value="-application"/>
			<arg value="org.eclipse.equinox.p2.publisher.FeaturesAndBundlesPublisher"/>
			<arg value="-metadataRepository"/>
			<arg value="file:${temp_path}/${repository_folder}"/>
			<arg value="-artifactRepository"/>
			<arg value="file:${temp_path}/${repository_folder}"/>
			<arg value="-source"/>
			<arg value="${temp_path}/org.moreunit_V_${version_number_file}/moreunit"/>
			<arg value="-compress"/>
			<arg value="-publishArtifacts"/>
		</exec>
	</target>

	<!--
		Adds a category for the current version.
	  -->
	<target name="category">
		<exec executable="${eclipse_path}/eclipse">
			<arg value="-application"/>
			<arg value="org.eclipse.equinox.p2.publisher.CategoryPublisher"/>
			<arg value="-metadataRepository"/>
			<arg value="file:${temp_path}/${repository_folder}"/>
			<arg value="-categoryDefinition"/>
			<arg value="file:/${workspace}/org.moreunit.build/${category_file_name}"/>
			<arg value="-compress"/>
		</exec>
	</target>

	<target name="update_version_number">
		<echo>New version number: ${version_number}</echo>
		<echo>Update version number in feature.xml</echo>
		<replaceregexp 
			match="version=&quot;[0-9]\.[0-9]\.[0-9]\.qualifier&quot;" 
			replace="version=&quot;${version_number}.qualifier&quot;"
			byline="true">
			<fileset dir="${workspace}">
				<include name="org.moreunit.feature/feature.xml"/>
				<include name="org.moreunit.mock.feature/feature.xml"/>
			</fileset>
		</replaceregexp>
		<echo>Update version number in MANIFEST.MF</echo>
		<replaceregexp 
			match="Bundle-Version: [0-9]\.[0-9]\.[0-9]" 
			replace="Bundle-Version: ${version_number}"
			byline="true">
			<fileset dir="${workspace}" includes="${moreunit_feature_plugins}/META-INF/MANIFEST.MF,${moreunit_mock_feature_plugins}/META-INF/MANIFEST.MF" />
		</replaceregexp>
	</target>

	<!--
		Building the feature.
		See: http://publib.boulder.ibm.com/infocenter/iadthelp/v7r0/index.jsp?topic=/org.eclipse.pde.doc.user/guide/tasks/pde_feature_build.htm
		Building more than one feature at a time:
		See: http://dev.eclipse.org/mhonarc/lists/pde-build-dev/msg00677.html
	  -->
	<target name="build_feature">
		<exec executable="java">
			<arg value="-jar"/>
			<arg value="${eclipse_path}/plugins/${equinox_launcher_jar_name}"/>
			<arg value="-application"/>
			<arg value="org.eclipse.ant.core.antRunner"/>
			<arg value="-buildfile"/>
			<arg value="${eclipse_path}/plugins/${pde_build_folder_name}/scripts/build.xml"/>
			<arg value="-Dbuilder=${workspace}/org.moreunit.build"/>
		</exec>
	</target>

	<target name="prepare_release_properties">
		<property name="category_file_name" value="category.xml"/>
	</target>

	<target name="prepare_latestandgreatest_properties">
		<property name="category_file_name" value="category_latestandgreatest.xml"/>
	</target>

	<target name="prepare_folder_for_release" depends="create_tmp_folders">
		<unzip src="${temp_path}/org.moreunit.plugin.zip" dest="${temp_path}/moreunit.build/plugins/" />
		<unzip src="${temp_path}/org.moreunit.feature.zip" dest="${temp_path}/moreunit.build/features/" />
		
		<unzip src="${temp_path}/org.moreunit.mock.zip" dest="${temp_path}/moreunit.build/plugins/" />
		<unzip src="${temp_path}/org.moreunit.dependencies.guice.zip" dest="${temp_path}/moreunit.build/plugins/" />
		<unzip src="${temp_path}/org.moreunit.dependencies.jaxb.zip" dest="${temp_path}/moreunit.build/plugins/" />
		<unzip src="${temp_path}/org.moreunit.mock.feature.zip" dest="${temp_path}/moreunit.build/features/" />
	</target>

	<target name="prepare_folder_for_local_build" depends="create_tmp_folders">
		<copy todir="${temp_path}/moreunit.build/features/org.moreunit.feature">
			<fileset dir="${workspace}/org.moreunit.feature"/>
		</copy>
		<copy todir="${temp_path}/moreunit.build/features/org.moreunit.mock.feature">
			<fileset dir="${workspace}/org.moreunit.mock.feature"/>
		</copy>
		<copy todir="${temp_path}/moreunit.build/plugins/">
			<fileset dir="${workspace}" includes="${moreunit_feature_plugins}" />
		</copy>
		<copy todir="${temp_path}/moreunit.build/plugins/">
			<fileset dir="${workspace}" includes="${moreunit_mock_feature_plugins}" />
		</copy>
	</target>

	<target name="create_tmp_folders">
		<delete dir="${temp_path}/moreunit.build/"/>
		<mkdir dir="${temp_path}/moreunit.build/"/>
		<mkdir dir="${temp_path}/moreunit.build/features"/>
		<mkdir dir="${temp_path}/moreunit.build/plugins"/>
	</target>

	<macrodef name="get_folder_from_repos_def">
		<attribute name="folder"/>
		<attribute name="version"/>
		<attribute name="outputpath"/>
		<element name="get-folder-from-repos"/>
		<sequential>
			<echo>  get @{folder}</echo>
			<exec executable="git">
				<arg value="archive"/>
				<arg value="--format=zip"/>
				<arg value="--output=@{outputpath}/@{folder}.zip"/>
				<arg value="--remote=git://moreunit.git.sourceforge.net/gitroot/moreunit/moreunit"/>
				<arg value="@{version}"/>
				<arg value="@{folder}"/>
			</exec>
		</sequential>
		</macrodef>
	
	<target name="get_tagged_sources">
		<echo message="get tagged version (V_${version_number_file}) from GIT repository"/>
		<get_folder_from_repos_def version="V_${version_number_file}" folder="org.moreunit.plugin" outputpath="${temp_path}"/>
		<get_folder_from_repos_def version="V_${version_number_file}" folder="org.moreunit.feature" outputpath="${temp_path}"/>
		<get_folder_from_repos_def version="V_${version_number_file}" folder="org.moreunit.mock" outputpath="${temp_path}"/>
		<get_folder_from_repos_def version="V_${version_number_file}" folder="org.moreunit.mock.feature" outputpath="${temp_path}"/>
		<get_folder_from_repos_def version="V_${version_number_file}" folder="org.moreunit.dependencies.guice" outputpath="${temp_path}"/>
		<get_folder_from_repos_def version="V_${version_number_file}" folder="org.moreunit.dependencies.jaxb" outputpath="${temp_path}"/>
	</target>

	<target name="commit_version_number">
		<echo message="TODO commit files with updates version number: feature.xml, MANIFEST.MF, ${category_file_name}"/>
		<!--
		<exec command="svn commit -m 'new version' ${workspace}/org.moreunit.feature/feature.xml" />
		<exec command="svn commit -m 'new version' ${workspace}/org.moreunit.plugin/META-INF/MANIFEST.MF" />
		<exec command="svn commit -m 'new version' ${workspace}/org.moreunit.feature/${category_file_name}" />
	-->
	</target>

	<target name="tag_version">
		<echo message="TODO tag version in SVN: V_${version_number_file}" />
		<!--
		<exec command="svn copy ${svn_host}/trunk ${svn_host}/tags/V_${version_number_file} -m 'Tag for new release ${version_number}'"/>
	-->
	</target>

	<!--
		This task updates the category-files (category_latestandgreatest.xml & category.xml).
		In the latestandgreatest file we just need to update the version numbers.
		In category.xml we have to scenarios:
		1) The version (x.x.*) is already in the file, so we need to update this version
		   number (by updating the minor version number)
		2) The version (x.x.*) is not in the file, so we need to add this version to the file.
	  -->
	<target name="update_category">
		<!-- see generateVersionsLists comments, where variable feature_property_name comes from -->
		<property file="${temp_path}/moreunit.build/finalFeaturesVersions.properties"/>
		<replaceregexp 
			file="${workspace}/org.moreunit.build/category_latestandgreatest.xml" 
			match="features/org.moreunit_[0-9]\.[0-9]\.[0-9]\.*[0-9]*\.jar" 
			replace="features/org.moreunit_${org.moreunit}.jar"
			byline="true"/>
		<replaceregexp 
			file="${workspace}/org.moreunit.build/category_latestandgreatest.xml" 
			match="features/org.moreunit.mock_[0-9]\.[0-9]\.[0-9]\.*[0-9]*\.jar" 
			replace="features/org.moreunit.mock_${org.moreunit.mock}.jar"
			byline="true"/>
		<replaceregexp 
			file="${workspace}/org.moreunit.build/category_latestandgreatest.xml" 
			match="id=&quot;org.moreunit&quot; version=&quot;[0-9]\.[0-9]\.[0-9]\.*[0-9]*&quot;" 
			replace="id=&quot;org.moreunit&quot; version=&quot;${org.moreunit}&quot;"
			byline="true"/>
		<replaceregexp 
			file="${workspace}/org.moreunit.build/category_latestandgreatest.xml" 
			match="id=&quot;org.moreunit.mock&quot; version=&quot;[0-9]\.[0-9]\.[0-9]\.*[0-9]*&quot;" 
			replace="id=&quot;org.moreunit.mock&quot; version=&quot;${org.moreunit.mock}&quot;"
			byline="true"/>

		<exec executable="/bin/bash">
			<arg value="update_category.sh"/>
			<arg value="${main_number}" />
			<arg value="${major_number}" />
			<arg value="${minor_number}" />
			<arg value="${workspace}/org.moreunit.build/category.xml"/>
			<arg value="org.moreunit" />
		</exec>

		<exec executable="/bin/bash">
			<arg value="update_category.sh"/>
			<arg value="${main_number}" />
			<arg value="${major_number}" />
			<arg value="${minor_number}" />
			<arg value="${workspace}/org.moreunit.build/category.xml"/>
			<arg value="org.moreunit.mock" />
		</exec>
	</target>

	<!--
		Because of https://issues.apache.org/bugzilla/show_bug.cgi?id=33718
		it is necessary to add the passphrase attribute. 
	  -->
	<target name="copy_build_to_latestandgreatest_updatesite" description="Copies a the result of a build run to the latestandgreatest update site">
		<zip destfile="${temp_path}/latestandgreatest.zip" basedir="${temp_path}/${repository_folder}"></zip>
		<scp todir="${username},moreunit@web.sourceforge.net:/home/project-web/moreunit/htdocs" passphrase="" keyfile="${keyfile}" sftp="true" verbose="true">
			<fileset file="${temp_path}/latestandgreatest.zip"/>
		</scp>
		<!-- 
			 As sourceforge only has a restricted shell when using sshexec, this command
		     creates a shell and executes the unzip in this shell on the remote server 
		 -->
		<exec executable="ssh">
			<arg value="-t" />
			<arg value="${username},moreunit@shell.sourceforge.net" />
			<arg value="create" />
			<arg value="|" />
			<arg value="unzip -o /home/project-web/moreunit/htdocs/latestandgreatest.zip" />
		</exec>
	</target>
	
	<fileset dir="${workspace}" id="buildprops">
    	<include name="org.moreunit.feature/build.properties"/>
    	<include name="org.moreunit.mock.feature/build.properties"/>
		<include name="org.moreunit.plugin/build.properties"/>
		<include name="org.moreunit.mock/build.properties"/>
		<include name="org.moreunit.dependencies.guice/build.properties"/>
		<include name="org.moreunit.dependencies.jaxb/build.properties"/>
	</fileset>

	<!-- In nightly builds we want to use timestamp-qualifiers, but not in release builds -->
	<target name="set_qualifier_to_context">
		<replaceregexp
			match="qualifier=none" 
			replace="qualifier=context" 
			byline="true">
			<fileset refid="buildprops"/>
		</replaceregexp>
	</target>
	
	<target name="set_qualifier_to_none">
		<replaceregexp
			match="qualifier=context" 
			replace="qualifier=none"
			byline="true">
			<fileset refid="buildprops"/>
		</replaceregexp>
	</target>

</project>