<?xml version="1.0" encoding="UTF-8"?>
<project default="build_nightly" name="MoreUnit">
	
	<!-- Specify here the feature and version of the feature to build -->
	<property name="feature_id" value="org.moreunit.mock"/>
	<property name="main_number" value="2"/>
	<property name="major_number" value="3"/>
	<property name="minor_number" value="0"/>
	
	<!-- PROPERTIES INCLUSION -->
	
	<!--
		Create this file with the following properties:
		
		workspace=...
		temp_path=...
		eclipse_path=...
		username=...      # SF-Username
		keyfile=...       # private key for scp
		
		# you will find the following values in the plugins folder of your Eclipse installation:
		equinox_launcher_jar_name = org.eclipse.equinox.launcher_<version>.jar
		pde_build_folder_name = org.eclipse.pde.build_<version>
	  -->
	<property file="moreunit.properties"/>

	<!--
		Create the following file to define the plugins packaged in your feature, in the following format:
		
		feature_plugins=plugin_1_folder/**,plugin_2_folder/**
	-->
	<property file="${feature_id}.properties"/>
	
	<!-- /PROPERTIES INCLUSION -->

	<!--
	  Generate properties for versions
	  http://help.eclipse.org/galileo/index.jsp?topic=/org.eclipse.pde.doc.user/tasks/pde_version_qualifiers.htm
	  
	  This will generate properties-files in /tmp/moreunit.build:
	  - finalFeaturesVersions.properties
	  
	  Sample content:
	  #Sat Mar 05 18:46:18 CET 2011
	  org.moreunit_2.3.0=2.3.0.201103051846
	  org.moreunit=2.3.0.201103051846
	  org.moreunit.source_2.3.0=2.3.0.201103051846
	  org.moreunit.source=2.3.0.201103051846
	  -->
	<property name="generateVersionsLists" value="true" />

	<property name="version_number" value="${main_number}.${major_number}.${minor_number}"/>
	<property name="version_number_file" value="${main_number}_${major_number}_${minor_number}"/>

	<property name="update-site-project" value="${workspace}/org.moreunit.updatesite"/>

	<property name="repository_folder" value="repository"/>

	<property name="svn_host" value="https://moreunit.svn.sourceforge.net/svnroot/moreunit"/>
	
	<!--
		Macro to allow expansion of nested properties (needed in update_category)
		see: http://ant.apache.org/faq.html#propertyvalue-as-name-for-property
	  -->
	<macrodef name="propertycopy">
		<attribute name="name"/>
		<attribute name="from"/>
		<sequential>
			<property name="@{name}" value="${@{from}}"/>
		</sequential>
	</macrodef>

	<target
		name="build_release"
		depends="prepare_release_properties, prepare_folder_for_release, export_from_svn, build_feature, unzip_feature, metadata, category"
		description="Builds a release version from SVN and updates the update site project">
		<echo>Build new release version ${version_number}</echo>
	</target>

	<target
		name="build_nightly"
		depends="set_qualifier_to_context, refresh, prepare_latestandgreatest_properties, prepare_folder_for_local_build, build_feature, unzip_feature, metadata, update_category, category, set_qualifier_to_none, refresh"
		description="Builds a nightly build and puts it on the latestandgreatest update site">
	</target>

	<target
		name="build_pre_release"
		depends="prepare_release_properties, update_version_number, refresh, prepare_build, build_feature, unzip_feature, metadata, update_category, refresh, category, commit_version_number, tag_version"
		description="Builds a new pre-release version with a new version number">
	</target>

	<property name="p2.build" value="${temp_path}/${repository_folder}"/>
	<property name="p2.repo.location" value="${update-site-project}"/>

	<target name="merge_build">
		<p2.mirror source="${p2.build}">
			<destination location="${p2.repo.location}" compressed="true" append="true"/>
			<slicingoptions includeoptional="false" />
		</p2.mirror>
	</target>

	<target name="unzip_feature">
		<unzip src="${temp_path}/moreunit.build/moreunitbuild/${feature_id}-build.zip" dest="${temp_path}/${feature_id}_V_${version_number_file}/"/>
	</target>

	<target name="wait_for_feature">
		<echo>Wait for feature to be finished</echo>
		<sleep seconds="30"/>
	</target>

	<target name="refresh">
		<echo>Refreshing feature.xml, MANIFEST.MF, category.xml, build.properties</echo>
		<eclipse.refreshLocal resource="org.moreunit.feature/feature.xml" depth="infinite"/>
		<eclipse.refreshLocal resource="org.moreunit.plugin/META-INF/MANIFEST.MF" depth="infinite"/>
		<eclipse.refreshLocal resource="org.moreunit.feature/category.xml" depth="infinite"/>
		<eclipse.refreshLocal resource="org.moreunit.feature/build.properties" depth="infinite"/>
		<eclipse.refreshLocal resource="org.moreunit.plugin/build.properties" depth="infinite"/>
	</target>

	<target name="metadata">
		<exec executable="${eclipse_path}/eclipse">
			<arg value="-application"/><arg value="org.eclipse.equinox.p2.publisher.FeaturesAndBundlesPublisher"/>
			<arg value="-metadataRepository"/><arg value="file:${temp_path}/${repository_folder}"/>
			<arg value="-artifactRepository"/><arg value="file:${temp_path}/${repository_folder}"/>
			<arg value="-source"/><arg value="${temp_path}/${feature_id}_V_${version_number_file}/moreunit"/>
			<arg value="-compress"/>
			<arg value="-publishArtifacts"/>
		</exec>
	</target>

	<target name="category">
		<exec executable="${eclipse_path}/eclipse">
			<arg value="-application"/><arg value="org.eclipse.equinox.p2.publisher.CategoryPublisher"/>
			<arg value="-metadataRepository"/><arg value="file:${temp_path}/${repository_folder}"/>
			<arg value="-categoryDefinition"/><arg value="file:/${workspace}/org.moreunit.build/${category_file_name}"/>
			<arg value="-compress"/>
		</exec>
	</target>

	<target name="update_version_number">
		<echo>New version number: ${version_number}</echo>
		<echo>Update version number in feature.xml</echo>
		<replaceregexp 
			file="${workspace}/${feature_id}.feature/feature.xml" 
			match="version=&quot;[0-9]\.[0-9]\.[0-9]\.qualifier&quot;" 
			replace="version=&quot;${version_number}.qualifier&quot;"
			byline="true"/>
		<echo>Update version number in MANIFEST.MF</echo>
		<replaceregexp 
			match="Bundle-Version: [0-9]\.[0-9]\.[0-9]" 
			replace="Bundle-Version: ${version_number}"
			byline="true"/>
		<fileset dir="${workspace}" includes="${feature_plugins}/META-INF/MANIFEST.MF" />
	</target>

	<target name="prepare_build">
		<delete dir="${temp_path}/moreunit.build/"/>
		<mkdir dir="${temp_path}/moreunit.build/"/>
		<mkdir dir="${temp_path}/moreunit.build/features"/>
		<mkdir dir="${temp_path}/moreunit.build/plugins"/>
		<copy todir="${temp_path}/moreunit.build/features/${feature_id}.feature">
			<fileset dir="${workspace}/${feature_id}.feature"/>
		</copy>
		<copy todir="${temp_path}/moreunit.build/plugins/">
			<fileset dir="${workspace}" includes="${feature_plugins}" />
		</copy>
	</target>

	<!--
		Building the feature.
		See: http://publib.boulder.ibm.com/infocenter/iadthelp/v7r0/index.jsp?topic=/org.eclipse.pde.doc.user/guide/tasks/pde_feature_build.htm
		Building more than one feature at a time:
		See: http://dev.eclipse.org/mhonarc/lists/pde-build-dev/msg00677.html
	  -->
	<target name="build_feature" description="description">
		<exec executable="java">
			<arg value="-jar"/><arg value="${eclipse_path}/plugins/${equinox_launcher_jar_name}"/>
			<arg value="-application"/><arg value="org.eclipse.ant.core.antRunner"/>
			<arg value="-buildfile"/><arg value="${eclipse_path}/plugins/${pde_build_folder_name}/scripts/build.xml"/>
			<arg value="-Dbuilder=${workspace}/org.moreunit.build"/>
			<arg value="-Dfeature_id=${feature_id}"/>
		</exec>
	</target>

	<target name="prepare_release_properties">
		<property name="version_qualifier" value="none"/>
		<property name="category_file_name" value="category.xml"/>
	</target>

	<target name="prepare_latestandgreatest_properties">
		<property name="version_qualifier" value="context"/>
		<property name="category_file_name" value="category_latestandgreatest.xml"/>
	</target>

	<target name="prepare_folder_for_release" depends="create_tmp_folders">
	</target>

	<target name="prepare_folder_for_local_build" depends="create_tmp_folders">
		<copy todir="${temp_path}/moreunit.build/features/${feature_id}.feature">
			<fileset dir="${workspace}/${feature_id}.feature"/>
		</copy>
		<copy todir="${temp_path}/moreunit.build/plugins/">
			<fileset dir="${workspace}" includes="${feature_plugins}" />
		</copy>
	</target>

	<target name="create_tmp_folders">
		<delete dir="${temp_path}/moreunit.build/"/>
		<mkdir dir="${temp_path}/moreunit.build/"/>
		<mkdir dir="${temp_path}/moreunit.build/features"/>
		<mkdir dir="${temp_path}/moreunit.build/plugins"/>
	</target>

	<target name="export_from_svn">
		<echo message="export tagged version from SVN"/>
		<exec command="svn export ${svn_host}/tags/V_${version_number_file}/org.moreunit.feature ${temp_path}/moreunit.build/features/org.moreunit.feature/" />
		<exec command="svn export ${svn_host}/tags/V_${version_number_file}/org.moreunit.plugin ${temp_path}/moreunit.build/plugins/org.moreunit.plugin/" />
	</target>

	<target name="commit_version_number">
		<echo message="TODO commit files with updates version number: feature.xml, MANIFEST.MF, ${category_file_name}"/>
		<!--
		<exec command="svn commit -m 'new version' ${workspace}/org.moreunit.feature/feature.xml" />
		<exec command="svn commit -m 'new version' ${workspace}/org.moreunit.plugin/META-INF/MANIFEST.MF" />
		<exec command="svn commit -m 'new version' ${workspace}/org.moreunit.feature/${category_file_name}" />
	-->
	</target>

	<target name="tag_version">
		<echo message="TODO tag version in SVN: V_${version_number_file}" />
		<!--
		<exec command="svn copy ${svn_host}/trunk ${svn_host}/tags/V_${version_number_file} -m 'Tag for new release ${version_number}'"/>
	-->
	</target>

	<target name="update_category">
		<!-- see generateVersionsLists comments, where variable feature_property_name comes from -->
		<property file="${temp_path}/moreunit.build/finalFeaturesVersions.properties"/>
		<propertycopy name="feature_property_name" from="${feature_id}"/>
		<replaceregexp 
			file="${workspace}/org.moreunit.build/category_latestandgreatest.xml" 
			match="features/${feature_id}_[0-9]\.[0-9]\.[0-9]\.*[0-9]*\.jar" 
			replace="features/${feature_id}_${feature_property_name}.jar"
			byline="true"/>
		<replaceregexp 
			file="${workspace}/org.moreunit.build/category_latestandgreatest.xml" 
			match="id=&quot;${feature_id}&quot; version=&quot;[0-9]\.[0-9]\.[0-9]\.*[0-9]*&quot;" 
			replace="id=&quot;${feature_id}&quot; version=&quot;${feature_property_name}&quot;"
			byline="true"/>

		<exec executable="/bin/bash">
			<arg value="update_category.sh"/>
			<arg value="${main_number}" />
			<arg value="${major_number}" />
			<arg value="${minor_number}" />
			<arg value="${workspace}/org.moreunit.build/category.xml"/>
			<arg value="${feature_id}" />
		</exec>
	</target>

	<!--
		Because of https://issues.apache.org/bugzilla/show_bug.cgi?id=33718
		it is necessary to add the passphrase attribute. 
	  -->
	<target name="copy_build_to_latestandgreatest_updatesite">
		<scp todir="${username},moreunit@web.sourceforge.net:/home/groups/m/mo/moreunit/htdocs/org.moreunit.updatetest" passphrase="" keyfile="${keyfile}" sftp="true" verbose="true">
			<fileset dir="${temp_path}/${repository_folder}">
			</fileset>
		</scp>
	</target>

	<!-- In nightly builds we want to use timestamp-qualifiers, but not in release builds -->
	<target name="set_qualifier_to_context">
		<replaceregexp 
			file="${workspace}/${feature_id}.feature/build.properties" 
			match="qualifier=none" 
			replace="qualifier=context"
			byline="true"/>
		<replaceregexp 
			match="qualifier=none" 
			replace="qualifier=context"
			byline="true">
			<fileset dir="${workspace}" includes="${feature_plugins}/build.properties" />
		</replaceregexp>
	</target>

	<target name="set_qualifier_to_none">
		<replaceregexp 
			file="${workspace}/${feature_id}.feature/build.properties" 
			match="qualifier=context" 
			replace="qualifier=none"
			byline="true"/>
		<replaceregexp 
			match="qualifier=context" 
			replace="qualifier=none"
			byline="true">
			<fileset dir="${workspace}" includes="${feature_plugins}/build.properties" />
		</replaceregexp>
	</target>
</project>