<?xml version="1.0" encoding="UTF-8" ?>

<mocking-templates version="1.0">
    <category id="org.moreunit.mock.jmock" name="jMock"/>
    <mocking-template
        id="org.moreunit.mock.jmockDefault"
        category="org.moreunit.mock.jmock"
        name="Default">
        <code-template id="jmockRunnerDeclaration" part="test-class-annotation">
            <pattern><![CDATA[@${runWith:newType(org.junit.runner.RunWith)}(${runner:newType(org.jmock.integration.junit4.JMock)}.class)
            ]]></pattern>
        </code-template>
        <code-template id="mockeryDeclaration" part="test-class-fields">
            <pattern><![CDATA[
            
  private final ${mockeryType:newType(org.jmock.Mockery)} ${mockery:newName(mockeryType)} = new ${mockeryImpl:newType(org.jmock.integration.junit4.JUnit4Mockery)}()
  {
    {
      setImposteriser(${clsimposter:newType(org.jmock.lib.legacy.ClassImposteriser)}.INSTANCE);
    }
  };
            ]]></pattern>
        </code-template>
        <code-template id="dependencyDeclaration" part="test-class-fields">
            <pattern><![CDATA[            
                private ${dependencyType} ${dependency} = ${mockery}.mock(${dependencyType}.class);
            ]]></pattern>
        </code-template>
        <code-template id="objectUnderTestDeclaration" part="test-class-fields">
            <pattern><![CDATA[
            
                private ${objectUnderTestType} ${objectUnderTest};
            ]]></pattern>
        </code-template>
        <code-template id="objectUnderTestCreation" part="before-instance-method">
            <pattern><![CDATA[${objectUnderTest} = new ${objectUnderTestType}();
            ]]></pattern>
        </code-template>
        <code-template id="setterInjection" part="before-instance-method">
            <include-if condition="injection-type" value="setter"/>
            <pattern><![CDATA[
            ${:setDependency(objectUnderTest, dependency)};
            ]]></pattern>
        </code-template>
    </mocking-template>
</mocking-templates>
